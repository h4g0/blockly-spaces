{"version":3,"sources":["logo.svg","Blockly/BlocklyComponent.jsx","Blockly/index.js","fields/BlocklyReactField.jsx","fields/DateField.jsx","blocks/customblocks.js","generator/generator.js","App.js","serviceWorker.js","index.js"],"names":["Blockly","setLocale","locale","BlocklyComponent","props","blocklyDiv","React","createRef","toolbox","this","initialXml","rest","children","primaryWorkspace","inject","current","Xml","domToWorkspace","textToDom","xml","Fragment","ref","id","xmlns","is","style","display","Component","Block","p","createElement","Value","Field","Shadow","BlocklyReactField","div_","getContentDiv","ReactDOM","render","border","sourceBlock_","getColourBorder","colourBorder","colourLight","setColour","getColour","showPositionedByField","dropdownDispose_","bind","unmountComponentAtNode","options","FieldRenderComponent","color","register","ReactDateField","onDateSelected_","date","setValue","Date","hideIfOwner","value_","toLocaleDateString","fieldElement","textContent","selected","onChange","inline","testReactField","init","jsonInit","setStyle","reactDateField","block","getField","getText","App","generateCode","code","BlocklyJS","workspaceToCode","simpleWorkspace","workspace","console","log","className","src","logo","alt","onClick","readOnly","trashcan","media","move","scrollbars","drag","wheel","type","name","disabled","Boolean","window","location","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c094d17e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","/**\r\n * @license\r\n *\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Blockly React Component.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\nimport React from 'react';\r\nimport './BlocklyComponent.css';\r\n\r\nimport Blockly from 'blockly/core';\r\nimport locale from 'blockly/msg/en';\r\nimport 'blockly/blocks';\r\n\r\nBlockly.setLocale(locale);\r\n\r\nclass BlocklyComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.blocklyDiv = React.createRef();\r\n        this.toolbox = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { initialXml, children, ...rest } = this.props;\r\n        this.primaryWorkspace = Blockly.inject(\r\n            this.blocklyDiv.current,\r\n            {\r\n                toolbox: this.toolbox.current,\r\n                ...rest\r\n            },\r\n        );\r\n\r\n        if (initialXml) {\r\n            Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(initialXml), this.primaryWorkspace);\r\n        }\r\n    }\r\n\r\n    get workspace() {\r\n        return this.primaryWorkspace;\r\n    }\r\n\r\n    setXml(xml) {\r\n        Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(xml), this.primaryWorkspace);\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n\r\n        return <React.Fragment>\r\n            <div ref={this.blocklyDiv} id=\"blocklyDiv\" />\r\n            <xml xmlns=\"https://developers.google.com/blockly/xml\" is=\"blockly\" style={{ display: 'none' }} ref={this.toolbox}>\r\n                {children}\r\n            </xml>\r\n        </React.Fragment>;\r\n    }\r\n}\r\n\r\nexport default BlocklyComponent;\r\n","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview XML wrappers for block, category, value, field and shadow.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\n import React from 'react';\r\nimport BlocklyComponent from './BlocklyComponent';\r\n\r\nexport default BlocklyComponent;\r\n\r\nconst Block = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"block\", props, children);\r\n};\r\n\r\nconst Category = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"category\", props, children);\r\n};\r\n\r\nconst Value = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"value\", props, children);\r\n};\r\n\r\nconst Field = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"field\", props, children);\r\n};\r\n\r\nconst Shadow = (p) => {\r\n    const { children, ...props } = p;\r\n    props.is = \"blockly\";\r\n    return React.createElement(\"shadow\", props, children);\r\n};\r\n\r\nexport { Block, Category, Value, Field, Shadow }","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Sample React Blockly Field.\r\n * This shows you how to create a custom Blockly field that renders a React\r\n * component inside of the dropdown div when shown.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as Blockly from 'blockly/core';\r\n\r\n\r\nclass BlocklyReactField extends Blockly.Field {\r\n\r\n  static fromJson(options) {\r\n    return new BlocklyReactField(options['text']);\r\n  }\r\n\r\n  showEditor_() {\r\n    this.div_ = Blockly.DropDownDiv.getContentDiv();\r\n    ReactDOM.render(this.render(),\r\n      this.div_);\r\n\r\n    var border = this.sourceBlock_.getColourBorder();\r\n    border = border.colourBorder || border.colourLight;\r\n    Blockly.DropDownDiv.setColour(this.sourceBlock_.getColour(), border);\r\n\r\n    Blockly.DropDownDiv.showPositionedByField(\r\n      this, this.dropdownDispose_.bind(this));\r\n  }\r\n\r\n  dropdownDispose_() {\r\n    ReactDOM.unmountComponentAtNode(this.div_);\r\n  }\r\n\r\n  render() {\r\n    return <FieldRenderComponent />\r\n  }\r\n}\r\n\r\nclass FieldRenderComponent extends React.Component {\r\n\r\n  render() {\r\n    return <div style={{ color: '#fff' }}>\r\n      Hello from React!\r\n        </div>;\r\n  }\r\n}\r\n\r\nBlockly.fieldRegistry.register('field_react_component', BlocklyReactField);\r\n\r\nexport default BlocklyReactField;\r\n","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview React date field that uses the react-datepicker package.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\nimport React from 'react';\r\nimport * as Blockly from 'blockly/core';\r\n\r\nimport BlocklyReactField from './BlocklyReactField';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nclass ReactDateField extends BlocklyReactField {\r\n\r\n  static fromJson(options) {\r\n    return new ReactDateField(new Date(options['date']));\r\n  }\r\n  \r\n  onDateSelected_ = (date) => {\r\n    this.setValue(new Date(date));\r\n    Blockly.DropDownDiv.hideIfOwner(this, true);\r\n  }\r\n\r\n  getText_() {\r\n    return this.value_.toLocaleDateString();\r\n  };\r\n\r\n  fromXml(fieldElement) {\r\n    this.setValue(new Date(fieldElement.textContent));\r\n  }\r\n\r\n  render() {\r\n    return <DatePicker\r\n        selected={this.value_}\r\n        onChange={this.onDateSelected_}\r\n        inline />\r\n  }\r\n}\r\n\r\nBlockly.fieldRegistry.register('field_react_date', ReactDateField);\r\n\r\nexport default ReactDateField;\r\n","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Define custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\n// More on defining blocks:\r\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\r\n\r\n\r\nimport * as Blockly from 'blockly/core';\r\n\r\n// Since we're using json to initialize the field, we'll need to import it.\r\nimport '../fields/BlocklyReactField';\r\nimport '../fields/DateField';\r\n\r\nvar testReactField = {\r\n  \"type\": \"test_react_field\",\r\n  \"message0\": \"custom field %1\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"field_react_component\",\r\n      \"name\": \"FIELD\",\r\n      \"text\": \"Click me\"\r\n    },\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n};\r\n\r\nBlockly.Blocks['test_react_field'] = {\r\n  init: function() {\r\n    this.jsonInit(testReactField);\r\n    this.setStyle('loop_blocks');\r\n  }\r\n};\r\n\r\nvar reactDateField = {\r\n  \"type\": \"test_react_date_field\",\r\n  \"message0\": \"date field %1\",\r\n  \"args0\": [\r\n    {\r\n      \"type\": \"field_react_date\",\r\n      \"name\": \"DATE\",\r\n      \"date\": \"01/01/2020\"\r\n    },\r\n  ],\r\n  \"previousStatement\": null,\r\n  \"nextStatement\": null,\r\n};\r\n\r\nBlockly.Blocks['test_react_date_field'] = {\r\n  init: function() {\r\n    this.jsonInit(reactDateField);\r\n    this.setStyle('loop_blocks');\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * \r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Define generation methods for custom blocks.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\n// More on generating code:\r\n// https://developers.google.com/blockly/guides/create-custom-blocks/generating-code\r\n\r\nimport * as Blockly from 'blockly/core';\r\nimport 'blockly/javascript';\r\n\r\nBlockly.JavaScript['test_react_field'] = function (block) {\r\n    return 'console.log(\\'custom block\\');\\n';\r\n};\r\n\r\nBlockly.JavaScript['test_react_date_field'] = function (block) {\r\n    return 'console.log(' + block.getField('DATE').getText() + ');\\n';\r\n};\r\n","/**\r\n * @license\r\n *\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Main React component that includes the Blockly component.\r\n * @author samelh@google.com (Sam El-Husseini)\r\n */\r\n\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\nimport logo from './logo.svg';\r\n\r\nimport BlocklyComponent, { Block, Value, Field, Shadow } from './Blockly';\r\n\r\nimport BlocklyJS from 'blockly/javascript';\r\n\r\nimport './blocks/customblocks';\r\nimport './generator/generator';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.simpleWorkspace = React.createRef();\r\n  }\r\n\r\n  generateCode = () => {\r\n    var code = BlocklyJS.workspaceToCode(\r\n      this.simpleWorkspace.current.workspace\r\n    );\r\n    console.log(code);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <button onClick={this.generateCode}>Convert</button>\r\n          <BlocklyComponent ref={this.simpleWorkspace}\r\n          readOnly={false} trashcan={true} media={'media/'}\r\n          move={{\r\n            scrollbars: true,\r\n            drag: true,\r\n            wheel: true\r\n          }}\r\n          initialXml={`\r\n<xml xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<block type=\"controls_ifelse\" x=\"0\" y=\"0\"></block>\r\n</xml>\r\n      `}>\r\n            <Block type=\"test_react_field\" />\r\n            <Block type=\"test_react_date_field\" />\r\n            <Block type=\"controls_ifelse\" />\r\n            <Block type=\"logic_compare\" />\r\n            <Block type=\"logic_operation\" />\r\n            <Block type=\"controls_repeat_ext\">\r\n              <Value name=\"TIMES\">\r\n                <Shadow type=\"math_number\">\r\n                  <Field name=\"NUM\">10</Field>\r\n                </Shadow>\r\n              </Value>\r\n            </Block>\r\n            <Block type=\"logic_operation\" />\r\n            <Block type=\"logic_negate\" />\r\n            <Block type=\"logic_boolean\" />\r\n            <Block type=\"logic_null\" disabled=\"true\" />\r\n            <Block type=\"logic_ternary\" />\r\n            <Block type=\"text_charAt\">\r\n              <Value name=\"VALUE\">\r\n                <Block type=\"variables_get\">\r\n                  <Field name=\"VAR\">text</Field>\r\n                </Block>\r\n              </Value>\r\n            </Block>\r\n          </BlocklyComponent>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}